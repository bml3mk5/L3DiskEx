#
# for linux
#
CC=g++

CDEFS=
DBG_CDEFS=-D_DEBUG -D_DEBUG_LOG

#ARCH=-m32
#ARCH=-m64

WXDIR=../../../../Devel/wxWidgets-3.0.2
WXCONFIG_SH=wx-config
WXCONFIG_ST=$(WXDIR)/build_release_static_unicode/wx-config
WXCONFIG_DBG=$(WXDIR)/build_debug_static_unicode/wx-config

SH_CFLAGS=$(ARCH) -Wall -O2 $(shell $(WXCONFIG_SH) --cppflags)
ST_CFLAGS=$(ARCH) -Wall -O2 $(shell $(WXCONFIG_ST) --cppflags)
DBG_CFLAGS=$(ARCH) -g -Wall -O0 $(shell $(WXCONFIG_DBG) --debug --cppflags)

LD=g++

LOCALLIBDIR=/usr/local/lib

SH_LDFLAGS=$(shell $(WXCONFIG_SH) --libs)
ST_LDFLAGS=$(shell $(WXCONFIG_ST) --static --libs)
DBG_LDFLAGS=$(shell $(WXCONFIG_DBG) --debug --libs)

EXEFILE=l3diskex

BUILDDIR=./build
SH_BUILDDIR=$(BUILDDIR)/shared
ST_BUILDDIR=$(BUILDDIR)/static
DBG_BUILDDIR=$(BUILDDIR)/debug

RELEASEDIR=./Release
DEBUGDIR=./Debug

SRCDIR=src

LANGDIR=lang
SRCLANG=$(LANGDIR)/

DATADIR=data
SRCDATA=$(DATADIR)/

OBJS=	utils.o \
	common.o \
	basiccommon.o \
	basicparam.o \
	basicerror.o \
	basictype.o \
	basictype_fat8.o \
	basictype_fat12.o \
	basictype_fm.o \
	basictype_l31s.o \
	basictype_l32d.o \
	basictype_msdos.o \
	basictype_msx.o \
	basictype_mz.o \
	basictype_n88.o \
	basictype_x1hu.o \
	basictype_flex.o \
	basictype_os9.o \
	basictype_cpm.o \
	basicfat.o \
	basicdiritem_fat8.o \
	basicdiritem_fm.o \
	basicdiritem_l31s.o \
	basicdiritem_l32d.o \
	basicdiritem_msdos.o \
	basicdiritem_msx.o \
	basicdiritem_mz.o \
	basicdiritem_n88.o \
	basicdiritem_x1hu.o \
	basicdiritem_flex.o \
	basicdiritem_os9.o \
	basicdiritem_cpm.o \
	basicdiritem.o \
	basicdir.o \
	basicfmt.o \
	basicselbox.o \
	basicparambox.o \
	charcodes.o \
	config.o \
	diskd88.o \
	diskd88creator.o \
	diskplainparser.o \
	diskd88parser.o \
	diskdskparser.o \
	diskparser.o \
	diskd88writer.o \
	diskplainwriter.o \
	diskwriter.o \
	diskparam.o \
	diskparambox.o \
	diskresult.o \
	diskreplacebox.o \
	fileparam.o \
	fileselbox.o \
	fontminibox.o \
	intnamebox.o \
	logging.o \
	rawparambox.o \
	rawexpbox.o \
	rawsectorbox.o \
	rawtrackbox.o \
	result.o \
	uibindump.o \
	uidiskattr.o \
	uidisklist.o \
	uifilelist.o \
	uirawdisk.o \
	uifatarea.o \
	uirpanel.o \
	main.o

EXE =$(BUILDDIR)/$(EXEFILE)
SH_EXE=$(SH_BUILDDIR)/$(EXEFILE)
ST_EXE=$(ST_BUILDDIR)/$(EXEFILE)
DBG_EXE=$(DBG_BUILDDIR)/$(EXEFILE)

SH_OBJS=$(OBJS:%=$(SH_BUILDDIR)/%)
ST_OBJS=$(OBJS:%=$(ST_BUILDDIR)/%)
DBG_OBJS=$(OBJS:%=$(DBG_BUILDDIR)/%)

SH_DEPS=$(OBJS:%.o=$(SH_BUILDDIR)/%.d)
ST_DEPS=$(OBJS:%.o=$(ST_BUILDDIR)/%.d)
DBG_DEPS=$(OBJS:%.o=$(DBG_BUILDDIR)/%.d)

LIBS=$(LOCALLIBS)
SH_LIBS=
ST_LIBS=$(LIBS)
DBG_LIBS=$(LIBS)

#
#
#

all: sh_exe

sh_exe: mk_sh_builddir $(SH_EXE)

st_exe: mk_st_builddir $(ST_EXE)

dbg_exe: mk_dbg_builddir $(DBG_EXE)

$(SH_EXE): sh_depend $(SH_OBJS)
	$(LD) -o $@ $(SH_OBJS) $(SH_LIBS) $(SH_LDFLAGS)

$(ST_EXE): st_depend $(ST_OBJS)
	$(LD) -o $@ $(ST_OBJS) $(ST_LIBS) $(ST_LDFLAGS)

$(DBG_EXE): dbg_depend $(DBG_OBJS)
	$(LD) -o $@ $(DBG_OBJS) $(DBG_LIBS) $(DBG_LDFLAGS)

$(SH_BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CDEFS) $(SH_CFLAGS) -c $< -o $@

$(ST_BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CDEFS) $(ST_CFLAGS) -c $< -o $@

$(DBG_BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(DBG_CDEFS) $(DBG_CFLAGS) -c $< -o $@

install: sh_install

sh_install: sh_exe
	mkdir -p $(RELEASEDIR)
	cp -p $(SH_EXE) $(RELEASEDIR)
	(mkdir -p $(RELEASEDIR)/$(DATADIR)/; cp -p $(SRCDATA)/*.* $(RELEASEDIR)/$(DATADIR)/; exit 0)
	for i in $(SRCLANG)/* ;do if [ -d $$i ]; then \
		mkdir -p $(RELEASEDIR)/$$i; cp -p $$i/*.mo $(RELEASEDIR)/$$i; \
	fi; done

st_install: st_exe
	mkdir -p $(RELEASEDIR)
	cp -p $(ST_EXE) $(RELEASEDIR)
	(mkdir -p $(RELEASEDIR)/$(DATADIR)/; cp -p $(SRCDATA)/*.* $(RELEASEDIR)/$(DATADIR)/; exit 0)
	for i in $(SRCLANG)/* ;do if [ -d $$i ]; then \
		mkdir -p $(RELEASEDIR)/$$i; cp -p $$i/*.mo $(RELEASEDIR)/$$i; \
	fi; done

dbg_install: dbg_exe
	mkdir -p $(DEBUGDIR)
	cp -p $(DBG_EXE) $(DEBUGDIR)
	(mkdir -p $(DEBUGDIR)/$(DATADIR)/; cp -p $(SRCDATA)/*.* $(DEBUGDIR)/$(DATADIR)/; exit 0)
	for i in $(SRCLANG)/* ;do if [ -d $$i ]; then \
		mkdir -p $(DEBUGDIR)/$$i; cp -p $$i/*.mo $(DEBUGDIR)/$$i; \
	fi; done

mk_builddir:
	mkdir -p $(BUILDDIR)

mk_sh_builddir:
	mkdir -p $(SH_BUILDDIR)

mk_st_builddir:
	mkdir -p $(ST_BUILDDIR)

mk_dbg_builddir:
	mkdir -p $(DBG_BUILDDIR)

clean: sh_clean

sh_clean:
	rm -rf $(SH_BUILDDIR)
	rm -f $(BUILDDIR)/Makefile.dep

st_clean:
	rm -rf $(ST_BUILDDIR)
	rm -f $(BUILDDIR)/Makefile.dep

dbg_clean:
	rm -rf $(DBG_BUILDDIR)
	rm -f $(BUILDDIR)/Makefile.dep

clean_all:
	rm -rf $(BUILDDIR)

depend: $(SH_BUILDDIR)/Makefile.dep

sh_depend: $(SH_BUILDDIR)/Makefile.dep

st_depend: $(ST_BUILDDIR)/Makefile.dep

dbg_depend: $(DBG_BUILDDIR)/Makefile.dep

$(SH_BUILDDIR)/Makefile.dep: mk_sh_builddir $(SH_DEPS)
	cat $(SH_DEPS) > $(SH_BUILDDIR)/Makefile.dep
	cp -f $(SH_BUILDDIR)/Makefile.dep $(BUILDDIR)/Makefile.dep

$(ST_BUILDDIR)/Makefile.dep: mk_st_builddir $(ST_DEPS)
	cat $(ST_DEPS) > $(ST_BUILDDIR)/Makefile.dep
	cp -f $(ST_BUILDDIR)/Makefile.dep $(BUILDDIR)/Makefile.dep

$(DBG_BUILDDIR)/Makefile.dep: mk_dbg_builddir $(DBG_DEPS)
	cat $(DBG_DEPS) > $(DBG_BUILDDIR)/Makefile.dep
	cp -f $(DBG_BUILDDIR)/Makefile.dep $(BUILDDIR)/Makefile.dep

$(SH_BUILDDIR)/%.d: $(SRCDIR)/%.cpp
	-$(CC) $(CDEFS) $(SH_CFLAGS) -MM $< | sed 's#^.*\.o:#$@:#' | sed 's/\.d:/.o:/' > $@

$(ST_BUILDDIR)/%.d: $(SRCDIR)/%.cpp
	-$(CC) $(CDEFS) $(ST_CFLAGS) -MM $< | sed 's#^.*\.o:#$@:#' | sed 's/\.d:/.o:/' > $@

$(DBG_BUILDDIR)/%.d: $(SRCDIR)/%.cpp
	-$(CC) $(CDEFS) $(DBG_CFLAGS) -MM $< | sed 's#^.*\.o:#$@:#' | sed 's/\.d:/.o:/' > $@

-include $(BUILDDIR)/Makefile.dep
